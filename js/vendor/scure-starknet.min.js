(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){const starknet=require("./index");window.starknet=starknet},{"./index":2}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.poseidonSmall=exports.Fp251=exports.keccak=exports.computeHashOnElements=exports.utils=exports.Signature=exports.ProjectivePoint=exports.CURVE=exports._starkCurve=exports.MAX_VALUE=void 0;exports.getPublicKey=getPublicKey;exports.getSharedSecret=getSharedSecret;exports.sign=sign;exports.verify=verify;exports.grindKey=grindKey;exports.getStarkKey=getStarkKey;exports.ethSigToPrivate=ethSigToPrivate;exports.getAccountPath=getAccountPath;exports.pedersen=pedersen;exports._poseidonMDS=_poseidonMDS;exports.poseidonBasic=poseidonBasic;exports.poseidonCreate=poseidonCreate;exports.poseidonHash=poseidonHash;exports.poseidonHashFunc=poseidonHashFunc;exports.poseidonHashSingle=poseidonHashSingle;exports.poseidonHashMany=poseidonHashMany;const sha3_1=require("@noble/hashes/sha3");const sha256_1=require("@noble/hashes/sha256");const utils_1=require("@noble/hashes/utils");const modular_1=require("@noble/curves/abstract/modular");const poseidon_1=require("@noble/curves/abstract/poseidon");const weierstrass_1=require("@noble/curves/abstract/weierstrass");const u=require("@noble/curves/abstract/utils");const _shortw_utils_1=require("@noble/curves/_shortw_utils");const CURVE_ORDER=BigInt("3618502788666131213697322783095070105526743751716087489154079457884512865583");exports.MAX_VALUE=BigInt("0x800000000000000000000000000000000000000000000000000000000000000");const nBitLength=252;function bits2int(bytes){while(bytes[0]===0)bytes=bytes.subarray(1);const delta=bytes.length*8-nBitLength;const num=u.bytesToNumberBE(bytes);return delta>0?num>>BigInt(delta):num}function hex0xToBytes(hex){if(typeof hex==="string"){hex=strip0x(hex);if(hex.length&1)hex="0"+hex}return u.hexToBytes(hex)}const curve=(0,weierstrass_1.weierstrass)({a:BigInt(1),b:BigInt("3141592653589793238462643383279502884197169399375105820974944592307816406665"),Fp:(0,modular_1.Field)(BigInt("0x800000000000011000000000000000000000000000000000000000000000001")),n:CURVE_ORDER,nBitLength:nBitLength,Gx:BigInt("874739451078007766457464989774322083649278607533249481151382481072868806602"),Gy:BigInt("152666792071518830868575557812948353041420400780739481342941381225525861407"),h:BigInt(1),lowS:false,...(0,_shortw_utils_1.getHash)(sha256_1.sha256),bits2int:bits2int,bits2int_modN:bytes=>{const hex=u.bytesToNumberBE(bytes).toString(16);if(hex.length===63)bytes=hex0xToBytes(hex+"0");return(0,modular_1.mod)(bits2int(bytes),CURVE_ORDER)}});exports._starkCurve=curve;function ensureBytes(hex){return u.ensureBytes("",typeof hex==="string"?hex0xToBytes(hex):hex)}function normPrivKey(privKey){return u.bytesToHex(ensureBytes(privKey)).padStart(64,"0")}function getPublicKey(privKey,isCompressed=false){return curve.getPublicKey(normPrivKey(privKey),isCompressed)}function getSharedSecret(privKeyA,pubKeyB){return curve.getSharedSecret(normPrivKey(privKeyA),pubKeyB)}function checkSignature(signature){const{r,s}=signature;if(r<0n||r>=exports.MAX_VALUE)throw new Error(`Signature.r should be [1, ${exports.MAX_VALUE})`);const w=(0,modular_1.invert)(s,CURVE_ORDER);if(w<0n||w>=exports.MAX_VALUE)throw new Error(`inv(Signature.s) should be [1, ${exports.MAX_VALUE})`)}function checkMessage(msgHash){const bytes=ensureBytes(msgHash);const num=u.bytesToNumberBE(bytes);if(num>=exports.MAX_VALUE)throw new Error(`msgHash should be [0, ${exports.MAX_VALUE})`);return bytes}function sign(msgHash,privKey,opts){const sig=curve.sign(checkMessage(msgHash),normPrivKey(privKey),opts);checkSignature(sig);return sig}function verify(signature,msgHash,pubKey){if(!(signature instanceof Signature)){const bytes=ensureBytes(signature);try{signature=Signature.fromDER(bytes)}catch(derError){if(!(derError instanceof weierstrass_1.DER.Err))throw derError;signature=Signature.fromCompact(bytes)}}checkSignature(signature);return curve.verify(signature,checkMessage(msgHash),ensureBytes(pubKey))}const{CURVE,ProjectivePoint,Signature,utils}=curve;exports.CURVE=CURVE;exports.ProjectivePoint=ProjectivePoint;exports.Signature=Signature;exports.utils=utils;function extractX(bytes){const hex=u.bytesToHex(bytes.subarray(1));const stripped=hex.replace(/^0+/gm,"");return`0x${stripped}`}function strip0x(hex){return hex.replace(/^0x/i,"")}function grindKey(seed){const _seed=ensureBytes(seed);const sha256mask=2n**256n;const limit=sha256mask-(0,modular_1.mod)(sha256mask,CURVE_ORDER);for(let i=0;;i++){const key=sha256Num(u.concatBytes(_seed,u.numberToVarBytesBE(BigInt(i))));if(key<limit)return(0,modular_1.mod)(key,CURVE_ORDER).toString(16);if(i===1e5)throw new Error("grindKey is broken: tried 100k vals")}}function getStarkKey(privateKey){return extractX(getPublicKey(privateKey,true))}function ethSigToPrivate(signature){signature=strip0x(signature);if(signature.length!==130)throw new Error("Wrong ethereum signature");return grindKey(signature.substring(0,64))}const MASK_31=2n**31n-1n;const int31=n=>Number(n&MASK_31);function getAccountPath(layer,application,ethereumAddress,index){const layerNum=int31(sha256Num(layer));const applicationNum=int31(sha256Num(application));const eth=u.hexToNumber(strip0x(ethereumAddress));return`m/2645'/${layerNum}'/${applicationNum}'/${int31(eth)}'/${int31(eth>>31n)}'/${index}`}const PEDERSEN_POINTS=[new ProjectivePoint(2089986280348253421170679821480865132823066470938446095505822317253594081284n,1713931329540660377023406109199410414810705867260802078187082345529207694986n,1n),new ProjectivePoint(996781205833008774514500082376783249102396023663454813447423147977397232763n,1668503676786377725805489344771023921079126552019160156920634619255970485781n,1n),new ProjectivePoint(2251563274489750535117886426533222435294046428347329203627021249169616184184n,1798716007562728905295480679789526322175868328062420237419143593021674992973n,1n),new ProjectivePoint(2138414695194151160943305727036575959195309218611738193261179310511854807447n,113410276730064486255102093846540133784865286929052426931474106396135072156n,1n),new ProjectivePoint(2379962749567351885752724891227938183011949129833673362440656643086021394946n,776496453633298175483985398648758586525933812536653089401905292063708816422n,1n)];function pedersenPrecompute(p1,p2){const out=[];let p=p1;for(let i=0;i<248;i++){out.push(p);p=p.double()}p=p2;for(let i=0;i<4;i++){out.push(p);p=p.double()}return out}const PEDERSEN_POINTS1=pedersenPrecompute(PEDERSEN_POINTS[1],PEDERSEN_POINTS[2]);const PEDERSEN_POINTS2=pedersenPrecompute(PEDERSEN_POINTS[3],PEDERSEN_POINTS[4]);function pedersenArg(arg){let value;if(typeof arg==="bigint"){value=arg}else if(typeof arg==="number"){if(!Number.isSafeInteger(arg))throw new Error(`Invalid pedersenArg: ${arg}`);value=BigInt(arg)}else{value=u.bytesToNumberBE(ensureBytes(arg))}if(!(0n<=value&&value<curve.CURVE.Fp.ORDER))throw new Error(`PedersenArg should be 0 <= value < CURVE.P: ${value}`);return value}function pedersenSingle(point,value,constants){let x=pedersenArg(value);for(let j=0;j<252;j++){const pt=constants[j];if(!pt)throw new Error("invalid constant index");if(pt.equals(point))throw new Error("Same point");if((x&1n)!==0n)point=point.add(pt);x>>=1n}return point}function pedersen(x,y){let point=PEDERSEN_POINTS[0];point=pedersenSingle(point,x,PEDERSEN_POINTS1);point=pedersenSingle(point,y,PEDERSEN_POINTS2);return extractX(point.toRawBytes(true))}const computeHashOnElements=(data,fn=pedersen)=>[0,...data,data.length].reduce((x,y)=>fn(x,y));exports.computeHashOnElements=computeHashOnElements;const MASK_250=u.bitMask(250);const keccak=data=>u.bytesToNumberBE((0,sha3_1.keccak_256)(data))&MASK_250;exports.keccak=keccak;const sha256Num=data=>u.bytesToNumberBE((0,sha256_1.sha256)(data));exports.Fp251=(0,modular_1.Field)(BigInt("3618502788666131213697322783095070105623107215331596699973092056135872020481"));function poseidonRoundConstant(Fp,name,idx){const val=Fp.fromBytes((0,sha256_1.sha256)((0,utils_1.utf8ToBytes)(`${name}${idx}`)));return Fp.create(val)}function _poseidonMDS(Fp,name,m,attempt=0){const x_values=[];const y_values=[];for(let i=0;i<m;i++){x_values.push(poseidonRoundConstant(Fp,`${name}x`,attempt*m+i));y_values.push(poseidonRoundConstant(Fp,`${name}y`,attempt*m+i))}if(new Set([...x_values,...y_values]).size!==2*m)throw new Error("X and Y values are not distinct");return x_values.map(x=>y_values.map(y=>Fp.inv(Fp.sub(x,y))))}const MDS_SMALL=[[3,1,1],[1,-1,1],[1,1,-2]].map(i=>i.map(BigInt));function poseidonBasic(opts,mds){(0,modular_1.validateField)(opts.Fp);if(!Number.isSafeInteger(opts.rate)||!Number.isSafeInteger(opts.capacity))throw new Error(`Wrong poseidon opts: ${opts}`);const m=opts.rate+opts.capacity;const rounds=opts.roundsFull+opts.roundsPartial;const roundConstants=[];for(let i=0;i<rounds;i++){const row=[];for(let j=0;j<m;j++)row.push(poseidonRoundConstant(opts.Fp,"Hades",m*i+j));roundConstants.push(row)}const res=(0,poseidon_1.poseidon)({...opts,t:m,sboxPower:3,reversePartialPowIdx:true,mds:mds,roundConstants:roundConstants});res.m=m;res.rate=opts.rate;res.capacity=opts.capacity;return res}function poseidonCreate(opts,mdsAttempt=0){const m=opts.rate+opts.capacity;if(!Number.isSafeInteger(mdsAttempt))throw new Error(`Wrong mdsAttempt=${mdsAttempt}`);return poseidonBasic(opts,_poseidonMDS(opts.Fp,"HadesMDS",m,mdsAttempt))}exports.poseidonSmall=poseidonBasic({Fp:exports.Fp251,rate:2,capacity:1,roundsFull:8,roundsPartial:83},MDS_SMALL);function poseidonHash(x,y,fn=exports.poseidonSmall){return fn([x,y,2n])[0]}function poseidonHashFunc(x,y,fn=exports.poseidonSmall){return u.numberToVarBytesBE(poseidonHash(u.bytesToNumberBE(x),u.bytesToNumberBE(y),fn))}function poseidonHashSingle(x,fn=exports.poseidonSmall){return fn([x,0n,1n])[0]}function poseidonHashMany(values,fn=exports.poseidonSmall){const{m,rate}=fn;if(!Array.isArray(values))throw new Error("bigint array expected in values");const padded=Array.from(values);padded.push(1n);while(padded.length%rate!==0)padded.push(0n);let state=new Array(m).fill(0n);for(let i=0;i<padded.length;i+=rate){for(let j=0;j<rate;j++){const item=padded[i+j];if(typeof item==="undefined")throw new Error("invalid index");let s=state[j];if(s){s+=item}}state=fn(state)}return state[0]}},{"@noble/curves/_shortw_utils":3,"@noble/curves/abstract/modular":5,"@noble/curves/abstract/poseidon":6,"@noble/curves/abstract/utils":7,"@noble/curves/abstract/weierstrass":8,"@noble/hashes/sha256":14,"@noble/hashes/sha3":15,"@noble/hashes/utils":16}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.createCurve=exports.getHash=void 0;const hmac_1=require("@noble/hashes/hmac");const utils_1=require("@noble/hashes/utils");const weierstrass_js_1=require("./abstract/weierstrass.js");function getHash(hash){return{hash:hash,hmac:(key,...msgs)=>(0,hmac_1.hmac)(hash,key,(0,utils_1.concatBytes)(...msgs)),randomBytes:utils_1.randomBytes}}exports.getHash=getHash;function createCurve(curveDef,defHash){const create=hash=>(0,weierstrass_js_1.weierstrass)({...curveDef,...getHash(hash)});return Object.freeze({...create(defHash),create:create})}exports.createCurve=createCurve},{"./abstract/weierstrass.js":8,"@noble/hashes/hmac":13,"@noble/hashes/utils":16}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.validateBasic=exports.wNAF=void 0;const modular_js_1=require("./modular.js");const utils_js_1=require("./utils.js");const _0n=BigInt(0);const _1n=BigInt(1);function wNAF(c,bits){const constTimeNegate=(condition,item)=>{const neg=item.negate();return condition?neg:item};const opts=W=>{const windows=Math.ceil(bits/W)+1;const windowSize=2**(W-1);return{windows:windows,windowSize:windowSize}};return{constTimeNegate:constTimeNegate,unsafeLadder(elm,n){let p=c.ZERO;let d=elm;while(n>_0n){if(n&_1n)p=p.add(d);d=d.double();n>>=_1n}return p},precomputeWindow(elm,W){const{windows,windowSize}=opts(W);const points=[];let p=elm;let base=p;for(let window=0;window<windows;window++){base=p;points.push(base);for(let i=1;i<windowSize;i++){base=base.add(p);points.push(base)}p=base.double()}return points},wNAF(W,precomputes,n){const{windows,windowSize}=opts(W);let p=c.ZERO;let f=c.BASE;const mask=BigInt(2**W-1);const maxNumber=2**W;const shiftBy=BigInt(W);for(let window=0;window<windows;window++){const offset=window*windowSize;let wbits=Number(n&mask);n>>=shiftBy;if(wbits>windowSize){wbits-=maxNumber;n+=_1n}const offset1=offset;const offset2=offset+Math.abs(wbits)-1;const cond1=window%2!==0;const cond2=wbits<0;if(wbits===0){f=f.add(constTimeNegate(cond1,precomputes[offset1]))}else{p=p.add(constTimeNegate(cond2,precomputes[offset2]))}}return{p:p,f:f}},wNAFCached(P,precomputesMap,n,transform){const W=P._WINDOW_SIZE||1;let comp=precomputesMap.get(P);if(!comp){comp=this.precomputeWindow(P,W);if(W!==1){precomputesMap.set(P,transform(comp))}}return this.wNAF(W,comp,n)}}}exports.wNAF=wNAF;function validateBasic(curve){(0,modular_js_1.validateField)(curve.Fp);(0,utils_js_1.validateObject)(curve,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"});return Object.freeze({...(0,modular_js_1.nLength)(curve.n,curve.nBitLength),...curve,...{p:curve.Fp.ORDER}})}exports.validateBasic=validateBasic},{"./modular.js":5,"./utils.js":7}],5:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.mapHashToField=exports.getMinHashLength=exports.getFieldBytesLength=exports.hashToPrivateScalar=exports.FpSqrtEven=exports.FpSqrtOdd=exports.Field=exports.nLength=exports.FpIsSquare=exports.FpDiv=exports.FpInvertBatch=exports.FpPow=exports.validateField=exports.isNegativeLE=exports.FpSqrt=exports.tonelliShanks=exports.invert=exports.pow2=exports.pow=exports.mod=void 0;const utils_js_1=require("./utils.js");const _0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2),_3n=BigInt(3);const _4n=BigInt(4),_5n=BigInt(5),_8n=BigInt(8);const _9n=BigInt(9),_16n=BigInt(16);function mod(a,b){const result=a%b;return result>=_0n?result:b+result}exports.mod=mod;function pow(num,power,modulo){if(modulo<=_0n||power<_0n)throw new Error("Expected power/modulo > 0");if(modulo===_1n)return _0n;let res=_1n;while(power>_0n){if(power&_1n)res=res*num%modulo;num=num*num%modulo;power>>=_1n}return res}exports.pow=pow;function pow2(x,power,modulo){let res=x;while(power-- >_0n){res*=res;res%=modulo}return res}exports.pow2=pow2;function invert(number,modulo){if(number===_0n||modulo<=_0n){throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`)}let a=mod(number,modulo);let b=modulo;let x=_0n,y=_1n,u=_1n,v=_0n;while(a!==_0n){const q=b/a;const r=b%a;const m=x-u*q;const n=y-v*q;b=a,a=r,x=u,y=v,u=m,v=n}const gcd=b;if(gcd!==_1n)throw new Error("invert: does not exist");return mod(x,modulo)}exports.invert=invert;function tonelliShanks(P){const legendreC=(P-_1n)/_2n;let Q,S,Z;for(Q=P-_1n,S=0;Q%_2n===_0n;Q/=_2n,S++);for(Z=_2n;Z<P&&pow(Z,legendreC,P)!==P-_1n;Z++);if(S===1){const p1div4=(P+_1n)/_4n;return function tonelliFast(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}const Q1div2=(Q+_1n)/_2n;return function tonelliSlow(Fp,n){if(Fp.pow(n,legendreC)===Fp.neg(Fp.ONE))throw new Error("Cannot find square root");let r=S;let g=Fp.pow(Fp.mul(Fp.ONE,Z),Q);let x=Fp.pow(n,Q1div2);let b=Fp.pow(n,Q);while(!Fp.eql(b,Fp.ONE)){if(Fp.eql(b,Fp.ZERO))return Fp.ZERO;let m=1;for(let t2=Fp.sqr(b);m<r;m++){if(Fp.eql(t2,Fp.ONE))break;t2=Fp.sqr(t2)}const ge=Fp.pow(g,_1n<<BigInt(r-m-1));g=Fp.sqr(ge);x=Fp.mul(x,ge);b=Fp.mul(b,g);r=m}return x}}exports.tonelliShanks=tonelliShanks;function FpSqrt(P){if(P%_4n===_3n){const p1div4=(P+_1n)/_4n;return function sqrt3mod4(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}if(P%_8n===_5n){const c1=(P-_5n)/_8n;return function sqrt5mod8(Fp,n){const n2=Fp.mul(n,_2n);const v=Fp.pow(n2,c1);const nv=Fp.mul(n,v);const i=Fp.mul(Fp.mul(nv,_2n),v);const root=Fp.mul(nv,Fp.sub(i,Fp.ONE));if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}if(P%_16n===_9n){}return tonelliShanks(P)}exports.FpSqrt=FpSqrt;const isNegativeLE=(num,modulo)=>(mod(num,modulo)&_1n)===_1n;exports.isNegativeLE=isNegativeLE;const FIELD_FIELDS=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function validateField(field){const initial={ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"};const opts=FIELD_FIELDS.reduce((map,val)=>{map[val]="function";return map},initial);return(0,utils_js_1.validateObject)(field,opts)}exports.validateField=validateField;function FpPow(f,num,power){if(power<_0n)throw new Error("Expected power > 0");if(power===_0n)return f.ONE;if(power===_1n)return num;let p=f.ONE;let d=num;while(power>_0n){if(power&_1n)p=f.mul(p,d);d=f.sqr(d);power>>=_1n}return p}exports.FpPow=FpPow;function FpInvertBatch(f,nums){const tmp=new Array(nums.length);const lastMultiplied=nums.reduce((acc,num,i)=>{if(f.is0(num))return acc;tmp[i]=acc;return f.mul(acc,num)},f.ONE);const inverted=f.inv(lastMultiplied);nums.reduceRight((acc,num,i)=>{if(f.is0(num))return acc;tmp[i]=f.mul(acc,tmp[i]);return f.mul(acc,num)},inverted);return tmp}exports.FpInvertBatch=FpInvertBatch;function FpDiv(f,lhs,rhs){return f.mul(lhs,typeof rhs==="bigint"?invert(rhs,f.ORDER):f.inv(rhs))}exports.FpDiv=FpDiv;function FpIsSquare(f){const legendreConst=(f.ORDER-_1n)/_2n;return x=>{const p=f.pow(x,legendreConst);return f.eql(p,f.ZERO)||f.eql(p,f.ONE)}}exports.FpIsSquare=FpIsSquare;function nLength(n,nBitLength){const _nBitLength=nBitLength!==undefined?nBitLength:n.toString(2).length;const nByteLength=Math.ceil(_nBitLength/8);return{nBitLength:_nBitLength,nByteLength:nByteLength}}exports.nLength=nLength;function Field(ORDER,bitLen,isLE=false,redef={}){if(ORDER<=_0n)throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);const{nBitLength:BITS,nByteLength:BYTES}=nLength(ORDER,bitLen);if(BYTES>2048)throw new Error("Field lengths over 2048 bytes are not supported");const sqrtP=FpSqrt(ORDER);const f=Object.freeze({ORDER:ORDER,BITS:BITS,BYTES:BYTES,MASK:(0,utils_js_1.bitMask)(BITS),ZERO:_0n,ONE:_1n,create:num=>mod(num,ORDER),isValid:num=>{if(typeof num!=="bigint")throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);return _0n<=num&&num<ORDER},is0:num=>num===_0n,isOdd:num=>(num&_1n)===_1n,neg:num=>mod(-num,ORDER),eql:(lhs,rhs)=>lhs===rhs,sqr:num=>mod(num*num,ORDER),add:(lhs,rhs)=>mod(lhs+rhs,ORDER),sub:(lhs,rhs)=>mod(lhs-rhs,ORDER),mul:(lhs,rhs)=>mod(lhs*rhs,ORDER),pow:(num,power)=>FpPow(f,num,power),div:(lhs,rhs)=>mod(lhs*invert(rhs,ORDER),ORDER),sqrN:num=>num*num,addN:(lhs,rhs)=>lhs+rhs,subN:(lhs,rhs)=>lhs-rhs,mulN:(lhs,rhs)=>lhs*rhs,inv:num=>invert(num,ORDER),sqrt:redef.sqrt||(n=>sqrtP(f,n)),invertBatch:lst=>FpInvertBatch(f,lst),cmov:(a,b,c)=>c?b:a,toBytes:num=>isLE?(0,utils_js_1.numberToBytesLE)(num,BYTES):(0,utils_js_1.numberToBytesBE)(num,BYTES),fromBytes:bytes=>{if(bytes.length!==BYTES)throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);return isLE?(0,utils_js_1.bytesToNumberLE)(bytes):(0,utils_js_1.bytesToNumberBE)(bytes)}});return Object.freeze(f)}exports.Field=Field;function FpSqrtOdd(Fp,elm){if(!Fp.isOdd)throw new Error(`Field doesn't have isOdd`);const root=Fp.sqrt(elm);return Fp.isOdd(root)?root:Fp.neg(root)}exports.FpSqrtOdd=FpSqrtOdd;function FpSqrtEven(Fp,elm){if(!Fp.isOdd)throw new Error(`Field doesn't have isOdd`);const root=Fp.sqrt(elm);return Fp.isOdd(root)?Fp.neg(root):root}exports.FpSqrtEven=FpSqrtEven;function hashToPrivateScalar(hash,groupOrder,isLE=false){hash=(0,utils_js_1.ensureBytes)("privateHash",hash);const hashLen=hash.length;const minLen=nLength(groupOrder).nByteLength+8;if(minLen<24||hashLen<minLen||hashLen>1024)throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);const num=isLE?(0,utils_js_1.bytesToNumberLE)(hash):(0,utils_js_1.bytesToNumberBE)(hash);return mod(num,groupOrder-_1n)+_1n}exports.hashToPrivateScalar=hashToPrivateScalar;function getFieldBytesLength(fieldOrder){if(typeof fieldOrder!=="bigint")throw new Error("field order must be bigint");const bitLength=fieldOrder.toString(2).length;return Math.ceil(bitLength/8)}exports.getFieldBytesLength=getFieldBytesLength;function getMinHashLength(fieldOrder){const length=getFieldBytesLength(fieldOrder);return length+Math.ceil(length/2)}exports.getMinHashLength=getMinHashLength;function mapHashToField(key,fieldOrder,isLE=false){const len=key.length;const fieldLen=getFieldBytesLength(fieldOrder);const minLen=getMinHashLength(fieldOrder);if(len<16||len<minLen||len>1024)throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);const num=isLE?(0,utils_js_1.bytesToNumberBE)(key):(0,utils_js_1.bytesToNumberLE)(key);const reduced=mod(num,fieldOrder-_1n)+_1n;return isLE?(0,utils_js_1.numberToBytesLE)(reduced,fieldLen):(0,utils_js_1.numberToBytesBE)(reduced,fieldLen)}exports.mapHashToField=mapHashToField},{"./utils.js":7}],6:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.poseidon=exports.splitConstants=exports.validateOpts=void 0;const modular_js_1=require("./modular.js");function validateOpts(opts){const{Fp,mds,reversePartialPowIdx:rev,roundConstants:rc}=opts;const{roundsFull,roundsPartial,sboxPower,t}=opts;(0,modular_js_1.validateField)(Fp);for(const i of["t","roundsFull","roundsPartial"]){if(typeof opts[i]!=="number"||!Number.isSafeInteger(opts[i]))throw new Error(`Poseidon: invalid param ${i}=${opts[i]} (${typeof opts[i]})`)}if(!Array.isArray(mds)||mds.length!==t)throw new Error("Poseidon: wrong MDS matrix");const _mds=mds.map(mdsRow=>{if(!Array.isArray(mdsRow)||mdsRow.length!==t)throw new Error(`Poseidon MDS matrix row: ${mdsRow}`);return mdsRow.map(i=>{if(typeof i!=="bigint")throw new Error(`Poseidon MDS matrix value=${i}`);return Fp.create(i)})});if(rev!==undefined&&typeof rev!=="boolean")throw new Error(`Poseidon: invalid param reversePartialPowIdx=${rev}`);if(roundsFull%2!==0)throw new Error(`Poseidon roundsFull is not even: ${roundsFull}`);const rounds=roundsFull+roundsPartial;if(!Array.isArray(rc)||rc.length!==rounds)throw new Error("Poseidon: wrong round constants");const roundConstants=rc.map(rc=>{if(!Array.isArray(rc)||rc.length!==t)throw new Error(`Poseidon wrong round constants: ${rc}`);return rc.map(i=>{if(typeof i!=="bigint"||!Fp.isValid(i))throw new Error(`Poseidon wrong round constant=${i}`);return Fp.create(i)})});if(!sboxPower||![3,5,7].includes(sboxPower))throw new Error(`Poseidon wrong sboxPower=${sboxPower}`);const _sboxPower=BigInt(sboxPower);let sboxFn=n=>(0,modular_js_1.FpPow)(Fp,n,_sboxPower);if(sboxPower===3)sboxFn=n=>Fp.mul(Fp.sqrN(n),n);else if(sboxPower===5)sboxFn=n=>Fp.mul(Fp.sqrN(Fp.sqrN(n)),n);return Object.freeze({...opts,rounds:rounds,sboxFn:sboxFn,roundConstants:roundConstants,mds:_mds})}exports.validateOpts=validateOpts;function splitConstants(rc,t){if(typeof t!=="number")throw new Error("poseidonSplitConstants: wrong t");if(!Array.isArray(rc)||rc.length%t)throw new Error("poseidonSplitConstants: wrong rc");const res=[];let tmp=[];for(let i=0;i<rc.length;i++){tmp.push(rc[i]);if(tmp.length===t){res.push(tmp);tmp=[]}}return res}exports.splitConstants=splitConstants;function poseidon(opts){const _opts=validateOpts(opts);const{Fp,mds,roundConstants,rounds,roundsPartial,sboxFn,t}=_opts;const halfRoundsFull=_opts.roundsFull/2;const partialIdx=_opts.reversePartialPowIdx?t-1:0;const poseidonRound=(values,isFull,idx)=>{values=values.map((i,j)=>Fp.add(i,roundConstants[idx][j]));if(isFull)values=values.map(i=>sboxFn(i));else values[partialIdx]=sboxFn(values[partialIdx]);values=mds.map(i=>i.reduce((acc,i,j)=>Fp.add(acc,Fp.mulN(i,values[j])),Fp.ZERO));return values};const poseidonHash=function poseidonHash(values){if(!Array.isArray(values)||values.length!==t)throw new Error(`Poseidon: wrong values (expected array of bigints with length ${t})`);values=values.map(i=>{if(typeof i!=="bigint")throw new Error(`Poseidon: wrong value=${i} (${typeof i})`);return Fp.create(i)});let round=0;for(let i=0;i<halfRoundsFull;i++)values=poseidonRound(values,true,round++);for(let i=0;i<roundsPartial;i++)values=poseidonRound(values,false,round++);for(let i=0;i<halfRoundsFull;i++)values=poseidonRound(values,true,round++);if(round!==rounds)throw new Error(`Poseidon: wrong number of rounds: last round=${round}, total=${rounds}`);return values};poseidonHash.roundConstants=roundConstants;return poseidonHash}exports.poseidon=poseidon},{"./modular.js":5}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.validateObject=exports.createHmacDrbg=exports.bitMask=exports.bitSet=exports.bitGet=exports.bitLen=exports.utf8ToBytes=exports.equalBytes=exports.concatBytes=exports.ensureBytes=exports.numberToVarBytesBE=exports.numberToBytesLE=exports.numberToBytesBE=exports.bytesToNumberLE=exports.bytesToNumberBE=exports.hexToBytes=exports.hexToNumber=exports.numberToHexUnpadded=exports.bytesToHex=exports.abytes=exports.isBytes=void 0;const _0n=BigInt(0);const _1n=BigInt(1);const _2n=BigInt(2);function isBytes(a){return a instanceof Uint8Array||a!=null&&typeof a==="object"&&a.constructor.name==="Uint8Array"}exports.isBytes=isBytes;function abytes(item){if(!isBytes(item))throw new Error("Uint8Array expected")}exports.abytes=abytes;const hexes=Array.from({length:256},(_,i)=>i.toString(16).padStart(2,"0"));function bytesToHex(bytes){abytes(bytes);let hex="";for(let i=0;i<bytes.length;i++){hex+=hexes[bytes[i]]}return hex}exports.bytesToHex=bytesToHex;function numberToHexUnpadded(num){const hex=num.toString(16);return hex.length&1?`0${hex}`:hex}exports.numberToHexUnpadded=numberToHexUnpadded;function hexToNumber(hex){if(typeof hex!=="string")throw new Error("hex string expected, got "+typeof hex);return BigInt(hex===""?"0":`0x${hex}`)}exports.hexToNumber=hexToNumber;const asciis={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function asciiToBase16(char){if(char>=asciis._0&&char<=asciis._9)return char-asciis._0;if(char>=asciis._A&&char<=asciis._F)return char-(asciis._A-10);if(char>=asciis._a&&char<=asciis._f)return char-(asciis._a-10);return}function hexToBytes(hex){if(typeof hex!=="string")throw new Error("hex string expected, got "+typeof hex);const hl=hex.length;const al=hl/2;if(hl%2)throw new Error("padded hex string expected, got unpadded hex of length "+hl);const array=new Uint8Array(al);for(let ai=0,hi=0;ai<al;ai++,hi+=2){const n1=asciiToBase16(hex.charCodeAt(hi));const n2=asciiToBase16(hex.charCodeAt(hi+1));if(n1===undefined||n2===undefined){const char=hex[hi]+hex[hi+1];throw new Error('hex string expected, got non-hex character "'+char+'" at index '+hi)}array[ai]=n1*16+n2}return array}exports.hexToBytes=hexToBytes;function bytesToNumberBE(bytes){return hexToNumber(bytesToHex(bytes))}exports.bytesToNumberBE=bytesToNumberBE;function bytesToNumberLE(bytes){abytes(bytes);return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()))}exports.bytesToNumberLE=bytesToNumberLE;function numberToBytesBE(n,len){return hexToBytes(n.toString(16).padStart(len*2,"0"))}exports.numberToBytesBE=numberToBytesBE;function numberToBytesLE(n,len){return numberToBytesBE(n,len).reverse()}exports.numberToBytesLE=numberToBytesLE;function numberToVarBytesBE(n){return hexToBytes(numberToHexUnpadded(n))}exports.numberToVarBytesBE=numberToVarBytesBE;function ensureBytes(title,hex,expectedLength){let res;if(typeof hex==="string"){try{res=hexToBytes(hex)}catch(e){throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`)}}else if(isBytes(hex)){res=Uint8Array.from(hex)}else{throw new Error(`${title} must be hex string or Uint8Array`)}const len=res.length;if(typeof expectedLength==="number"&&len!==expectedLength)throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);return res}exports.ensureBytes=ensureBytes;function concatBytes(...arrays){let sum=0;for(let i=0;i<arrays.length;i++){const a=arrays[i];abytes(a);sum+=a.length}const res=new Uint8Array(sum);for(let i=0,pad=0;i<arrays.length;i++){const a=arrays[i];res.set(a,pad);pad+=a.length}return res}exports.concatBytes=concatBytes;function equalBytes(a,b){if(a.length!==b.length)return false;let diff=0;for(let i=0;i<a.length;i++)diff|=a[i]^b[i];return diff===0}exports.equalBytes=equalBytes;function utf8ToBytes(str){if(typeof str!=="string")throw new Error(`utf8ToBytes expected string, got ${typeof str}`);return new Uint8Array((new TextEncoder).encode(str))}exports.utf8ToBytes=utf8ToBytes;function bitLen(n){let len;for(len=0;n>_0n;n>>=_1n,len+=1);return len}exports.bitLen=bitLen;function bitGet(n,pos){return n>>BigInt(pos)&_1n}exports.bitGet=bitGet;function bitSet(n,pos,value){return n|(value?_1n:_0n)<<BigInt(pos)}exports.bitSet=bitSet;const bitMask=n=>(_2n<<BigInt(n-1))-_1n;exports.bitMask=bitMask;const u8n=data=>new Uint8Array(data);const u8fr=arr=>Uint8Array.from(arr);function createHmacDrbg(hashLen,qByteLen,hmacFn){if(typeof hashLen!=="number"||hashLen<2)throw new Error("hashLen must be a number");if(typeof qByteLen!=="number"||qByteLen<2)throw new Error("qByteLen must be a number");if(typeof hmacFn!=="function")throw new Error("hmacFn must be a function");let v=u8n(hashLen);let k=u8n(hashLen);let i=0;const reset=()=>{v.fill(1);k.fill(0);i=0};const h=(...b)=>hmacFn(k,v,...b);const reseed=(seed=u8n())=>{k=h(u8fr([0]),seed);v=h();if(seed.length===0)return;k=h(u8fr([1]),seed);v=h()};const gen=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let len=0;const out=[];while(len<qByteLen){v=h();const sl=v.slice();out.push(sl);len+=v.length}return concatBytes(...out)};const genUntil=(seed,pred)=>{reset();reseed(seed);let res=undefined;while(!(res=pred(gen())))reseed();reset();return res};return genUntil}exports.createHmacDrbg=createHmacDrbg;const validatorFns={bigint:val=>typeof val==="bigint",function:val=>typeof val==="function",boolean:val=>typeof val==="boolean",string:val=>typeof val==="string",stringOrUint8Array:val=>typeof val==="string"||isBytes(val),isSafeInteger:val=>Number.isSafeInteger(val),array:val=>Array.isArray(val),field:(val,object)=>object.Fp.isValid(val),hash:val=>typeof val==="function"&&Number.isSafeInteger(val.outputLen)};function validateObject(object,validators,optValidators={}){const checkField=(fieldName,type,isOptional)=>{const checkVal=validatorFns[type];if(typeof checkVal!=="function")throw new Error(`Invalid validator "${type}", expected function`);const val=object[fieldName];if(isOptional&&val===undefined)return;if(!checkVal(val,object)){throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`)}};for(const[fieldName,type]of Object.entries(validators))checkField(fieldName,type,false);for(const[fieldName,type]of Object.entries(optValidators))checkField(fieldName,type,true);return object}exports.validateObject=validateObject},{}],8:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.mapToCurveSimpleSWU=exports.SWUFpSqrtRatio=exports.weierstrass=exports.weierstrassPoints=exports.DER=void 0;const mod=require("./modular.js");const ut=require("./utils.js");const utils_js_1=require("./utils.js");const curve_js_1=require("./curve.js");function validatePointOpts(curve){const opts=(0,curve_js_1.validateBasic)(curve);ut.validateObject(opts,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo,Fp,a}=opts;if(endo){if(!Fp.eql(a,Fp.ZERO)){throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0")}if(typeof endo!=="object"||typeof endo.beta!=="bigint"||typeof endo.splitScalar!=="function"){throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}}return Object.freeze({...opts})}const{bytesToNumberBE:b2n,hexToBytes:h2b}=ut;exports.DER={Err:class DERErr extends Error{constructor(m=""){super(m)}},_parseInt(data){const{Err:E}=exports.DER;if(data.length<2||data[0]!==2)throw new E("Invalid signature integer tag");const len=data[1];const res=data.subarray(2,len+2);if(!len||res.length!==len)throw new E("Invalid signature integer: wrong length");if(res[0]&128)throw new E("Invalid signature integer: negative");if(res[0]===0&&!(res[1]&128))throw new E("Invalid signature integer: unnecessary leading zero");return{d:b2n(res),l:data.subarray(len+2)}},toSig(hex){const{Err:E}=exports.DER;const data=typeof hex==="string"?h2b(hex):hex;ut.abytes(data);let l=data.length;if(l<2||data[0]!=48)throw new E("Invalid signature tag");if(data[1]!==l-2)throw new E("Invalid signature: incorrect length");const{d:r,l:sBytes}=exports.DER._parseInt(data.subarray(2));const{d:s,l:rBytesLeft}=exports.DER._parseInt(sBytes);if(rBytesLeft.length)throw new E("Invalid signature: left bytes after parsing");return{r:r,s:s}},hexFromSig(sig){const slice=s=>Number.parseInt(s[0],16)&8?"00"+s:s;const h=num=>{const hex=num.toString(16);return hex.length&1?`0${hex}`:hex};const s=slice(h(sig.s));const r=slice(h(sig.r));const shl=s.length/2;const rhl=r.length/2;const sl=h(shl);const rl=h(rhl);return`30${h(rhl+shl+4)}02${rl}${r}02${sl}${s}`}};const _0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2),_3n=BigInt(3),_4n=BigInt(4);function weierstrassPoints(opts){const CURVE=validatePointOpts(opts);const{Fp}=CURVE;const toBytes=CURVE.toBytes||((_c,point,_isCompressed)=>{const a=point.toAffine();return ut.concatBytes(Uint8Array.from([4]),Fp.toBytes(a.x),Fp.toBytes(a.y))});const fromBytes=CURVE.fromBytes||(bytes=>{const tail=bytes.subarray(1);const x=Fp.fromBytes(tail.subarray(0,Fp.BYTES));const y=Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES));return{x:x,y:y}});function weierstrassEquation(x){const{a,b}=CURVE;const x2=Fp.sqr(x);const x3=Fp.mul(x2,x);return Fp.add(Fp.add(x3,Fp.mul(x,a)),b)}if(!Fp.eql(Fp.sqr(CURVE.Gy),weierstrassEquation(CURVE.Gx)))throw new Error("bad generator point: equation left != right");function isWithinCurveOrder(num){return typeof num==="bigint"&&_0n<num&&num<CURVE.n}function assertGE(num){if(!isWithinCurveOrder(num))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function normPrivateKeyToScalar(key){const{allowedPrivateKeyLengths:lengths,nByteLength,wrapPrivateKey,n}=CURVE;if(lengths&&typeof key!=="bigint"){if(ut.isBytes(key))key=ut.bytesToHex(key);if(typeof key!=="string"||!lengths.includes(key.length))throw new Error("Invalid key");key=key.padStart(nByteLength*2,"0")}let num;try{num=typeof key==="bigint"?key:ut.bytesToNumberBE((0,utils_js_1.ensureBytes)("private key",key,nByteLength))}catch(error){throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`)}if(wrapPrivateKey)num=mod.mod(num,n);assertGE(num);return num}const pointPrecomputes=new Map;function assertPrjPoint(other){if(!(other instanceof Point))throw new Error("ProjectivePoint expected")}class Point{constructor(px,py,pz){this.px=px;this.py=py;this.pz=pz;if(px==null||!Fp.isValid(px))throw new Error("x required");if(py==null||!Fp.isValid(py))throw new Error("y required");if(pz==null||!Fp.isValid(pz))throw new Error("z required")}static fromAffine(p){const{x,y}=p||{};if(!p||!Fp.isValid(x)||!Fp.isValid(y))throw new Error("invalid affine point");if(p instanceof Point)throw new Error("projective point not allowed");const is0=i=>Fp.eql(i,Fp.ZERO);if(is0(x)&&is0(y))return Point.ZERO;return new Point(x,y,Fp.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(points){const toInv=Fp.invertBatch(points.map(p=>p.pz));return points.map((p,i)=>p.toAffine(toInv[i])).map(Point.fromAffine)}static fromHex(hex){const P=Point.fromAffine(fromBytes((0,utils_js_1.ensureBytes)("pointHex",hex)));P.assertValidity();return P}static fromPrivateKey(privateKey){return Point.BASE.multiply(normPrivateKeyToScalar(privateKey))}_setWindowSize(windowSize){this._WINDOW_SIZE=windowSize;pointPrecomputes.delete(this)}assertValidity(){if(this.is0()){if(CURVE.allowInfinityPoint&&!Fp.is0(this.py))return;throw new Error("bad point: ZERO")}const{x,y}=this.toAffine();if(!Fp.isValid(x)||!Fp.isValid(y))throw new Error("bad point: x or y not FE");const left=Fp.sqr(y);const right=weierstrassEquation(x);if(!Fp.eql(left,right))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y}=this.toAffine();if(Fp.isOdd)return!Fp.isOdd(y);throw new Error("Field doesn't support isOdd")}equals(other){assertPrjPoint(other);const{px:X1,py:Y1,pz:Z1}=this;const{px:X2,py:Y2,pz:Z2}=other;const U1=Fp.eql(Fp.mul(X1,Z2),Fp.mul(X2,Z1));const U2=Fp.eql(Fp.mul(Y1,Z2),Fp.mul(Y2,Z1));return U1&&U2}negate(){return new Point(this.px,Fp.neg(this.py),this.pz)}double(){const{a,b}=CURVE;const b3=Fp.mul(b,_3n);const{px:X1,py:Y1,pz:Z1}=this;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO;let t0=Fp.mul(X1,X1);let t1=Fp.mul(Y1,Y1);let t2=Fp.mul(Z1,Z1);let t3=Fp.mul(X1,Y1);t3=Fp.add(t3,t3);Z3=Fp.mul(X1,Z1);Z3=Fp.add(Z3,Z3);X3=Fp.mul(a,Z3);Y3=Fp.mul(b3,t2);Y3=Fp.add(X3,Y3);X3=Fp.sub(t1,Y3);Y3=Fp.add(t1,Y3);Y3=Fp.mul(X3,Y3);X3=Fp.mul(t3,X3);Z3=Fp.mul(b3,Z3);t2=Fp.mul(a,t2);t3=Fp.sub(t0,t2);t3=Fp.mul(a,t3);t3=Fp.add(t3,Z3);Z3=Fp.add(t0,t0);t0=Fp.add(Z3,t0);t0=Fp.add(t0,t2);t0=Fp.mul(t0,t3);Y3=Fp.add(Y3,t0);t2=Fp.mul(Y1,Z1);t2=Fp.add(t2,t2);t0=Fp.mul(t2,t3);X3=Fp.sub(X3,t0);Z3=Fp.mul(t2,t1);Z3=Fp.add(Z3,Z3);Z3=Fp.add(Z3,Z3);return new Point(X3,Y3,Z3)}add(other){assertPrjPoint(other);const{px:X1,py:Y1,pz:Z1}=this;const{px:X2,py:Y2,pz:Z2}=other;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO;const a=CURVE.a;const b3=Fp.mul(CURVE.b,_3n);let t0=Fp.mul(X1,X2);let t1=Fp.mul(Y1,Y2);let t2=Fp.mul(Z1,Z2);let t3=Fp.add(X1,Y1);let t4=Fp.add(X2,Y2);t3=Fp.mul(t3,t4);t4=Fp.add(t0,t1);t3=Fp.sub(t3,t4);t4=Fp.add(X1,Z1);let t5=Fp.add(X2,Z2);t4=Fp.mul(t4,t5);t5=Fp.add(t0,t2);t4=Fp.sub(t4,t5);t5=Fp.add(Y1,Z1);X3=Fp.add(Y2,Z2);t5=Fp.mul(t5,X3);X3=Fp.add(t1,t2);t5=Fp.sub(t5,X3);Z3=Fp.mul(a,t4);X3=Fp.mul(b3,t2);Z3=Fp.add(X3,Z3);X3=Fp.sub(t1,Z3);Z3=Fp.add(t1,Z3);Y3=Fp.mul(X3,Z3);t1=Fp.add(t0,t0);t1=Fp.add(t1,t0);t2=Fp.mul(a,t2);t4=Fp.mul(b3,t4);t1=Fp.add(t1,t2);t2=Fp.sub(t0,t2);t2=Fp.mul(a,t2);t4=Fp.add(t4,t2);t0=Fp.mul(t1,t4);Y3=Fp.add(Y3,t0);t0=Fp.mul(t5,t4);X3=Fp.mul(t3,X3);X3=Fp.sub(X3,t0);t0=Fp.mul(t3,t1);Z3=Fp.mul(t5,Z3);Z3=Fp.add(Z3,t0);return new Point(X3,Y3,Z3)}subtract(other){return this.add(other.negate())}is0(){return this.equals(Point.ZERO)}wNAF(n){return wnaf.wNAFCached(this,pointPrecomputes,n,comp=>{const toInv=Fp.invertBatch(comp.map(p=>p.pz));return comp.map((p,i)=>p.toAffine(toInv[i])).map(Point.fromAffine)})}multiplyUnsafe(n){const I=Point.ZERO;if(n===_0n)return I;assertGE(n);if(n===_1n)return this;const{endo}=CURVE;if(!endo)return wnaf.unsafeLadder(this,n);let{k1neg,k1,k2neg,k2}=endo.splitScalar(n);let k1p=I;let k2p=I;let d=this;while(k1>_0n||k2>_0n){if(k1&_1n)k1p=k1p.add(d);if(k2&_1n)k2p=k2p.add(d);d=d.double();k1>>=_1n;k2>>=_1n}if(k1neg)k1p=k1p.negate();if(k2neg)k2p=k2p.negate();k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz);return k1p.add(k2p)}multiply(scalar){assertGE(scalar);let n=scalar;let point,fake;const{endo}=CURVE;if(endo){const{k1neg,k1,k2neg,k2}=endo.splitScalar(n);let{p:k1p,f:f1p}=this.wNAF(k1);let{p:k2p,f:f2p}=this.wNAF(k2);k1p=wnaf.constTimeNegate(k1neg,k1p);k2p=wnaf.constTimeNegate(k2neg,k2p);k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz);point=k1p.add(k2p);fake=f1p.add(f2p)}else{const{p,f}=this.wNAF(n);point=p;fake=f}return Point.normalizeZ([point,fake])[0]}multiplyAndAddUnsafe(Q,a,b){const G=Point.BASE;const mul=(P,a)=>a===_0n||a===_1n||!P.equals(G)?P.multiplyUnsafe(a):P.multiply(a);const sum=mul(this,a).add(mul(Q,b));return sum.is0()?undefined:sum}toAffine(iz){const{px:x,py:y,pz:z}=this;const is0=this.is0();if(iz==null)iz=is0?Fp.ONE:Fp.inv(z);const ax=Fp.mul(x,iz);const ay=Fp.mul(y,iz);const zz=Fp.mul(z,iz);if(is0)return{x:Fp.ZERO,y:Fp.ZERO};if(!Fp.eql(zz,Fp.ONE))throw new Error("invZ was invalid");return{x:ax,y:ay}}isTorsionFree(){const{h:cofactor,isTorsionFree}=CURVE;if(cofactor===_1n)return true;if(isTorsionFree)return isTorsionFree(Point,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:cofactor,clearCofactor}=CURVE;if(cofactor===_1n)return this;if(clearCofactor)return clearCofactor(Point,this);return this.multiplyUnsafe(CURVE.h)}toRawBytes(isCompressed=true){this.assertValidity();return toBytes(Point,this,isCompressed)}toHex(isCompressed=true){return ut.bytesToHex(this.toRawBytes(isCompressed))}}Point.BASE=new Point(CURVE.Gx,CURVE.Gy,Fp.ONE);Point.ZERO=new Point(Fp.ZERO,Fp.ONE,Fp.ZERO);const _bits=CURVE.nBitLength;const wnaf=(0,curve_js_1.wNAF)(Point,CURVE.endo?Math.ceil(_bits/2):_bits);return{CURVE:CURVE,ProjectivePoint:Point,normPrivateKeyToScalar:normPrivateKeyToScalar,weierstrassEquation:weierstrassEquation,isWithinCurveOrder:isWithinCurveOrder}}exports.weierstrassPoints=weierstrassPoints;function validateOpts(curve){const opts=(0,curve_js_1.validateBasic)(curve);ut.validateObject(opts,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"});return Object.freeze({lowS:true,...opts})}function weierstrass(curveDef){const CURVE=validateOpts(curveDef);const{Fp,n:CURVE_ORDER}=CURVE;const compressedLen=Fp.BYTES+1;const uncompressedLen=2*Fp.BYTES+1;function isValidFieldElement(num){return _0n<num&&num<Fp.ORDER}function modN(a){return mod.mod(a,CURVE_ORDER)}function invN(a){return mod.invert(a,CURVE_ORDER)}const{ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder}=weierstrassPoints({...CURVE,toBytes(_c,point,isCompressed){const a=point.toAffine();const x=Fp.toBytes(a.x);const cat=ut.concatBytes;if(isCompressed){return cat(Uint8Array.from([point.hasEvenY()?2:3]),x)}else{return cat(Uint8Array.from([4]),x,Fp.toBytes(a.y))}},fromBytes(bytes){const len=bytes.length;const head=bytes[0];const tail=bytes.subarray(1);if(len===compressedLen&&(head===2||head===3)){const x=ut.bytesToNumberBE(tail);if(!isValidFieldElement(x))throw new Error("Point is not on curve");const y2=weierstrassEquation(x);let y;try{y=Fp.sqrt(y2)}catch(sqrtError){const suffix=sqrtError instanceof Error?": "+sqrtError.message:"";throw new Error("Point is not on curve"+suffix)}const isYOdd=(y&_1n)===_1n;const isHeadOdd=(head&1)===1;if(isHeadOdd!==isYOdd)y=Fp.neg(y);return{x:x,y:y}}else if(len===uncompressedLen&&head===4){const x=Fp.fromBytes(tail.subarray(0,Fp.BYTES));const y=Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES));return{x:x,y:y}}else{throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`)}}});const numToNByteStr=num=>ut.bytesToHex(ut.numberToBytesBE(num,CURVE.nByteLength));function isBiggerThanHalfOrder(number){const HALF=CURVE_ORDER>>_1n;return number>HALF}function normalizeS(s){return isBiggerThanHalfOrder(s)?modN(-s):s}const slcNum=(b,from,to)=>ut.bytesToNumberBE(b.slice(from,to));class Signature{constructor(r,s,recovery){this.r=r;this.s=s;this.recovery=recovery;this.assertValidity()}static fromCompact(hex){const l=CURVE.nByteLength;hex=(0,utils_js_1.ensureBytes)("compactSignature",hex,l*2);return new Signature(slcNum(hex,0,l),slcNum(hex,l,2*l))}static fromDER(hex){const{r,s}=exports.DER.toSig((0,utils_js_1.ensureBytes)("DER",hex));return new Signature(r,s)}assertValidity(){if(!isWithinCurveOrder(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!isWithinCurveOrder(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(recovery){return new Signature(this.r,this.s,recovery)}recoverPublicKey(msgHash){const{r,s,recovery:rec}=this;const h=bits2int_modN((0,utils_js_1.ensureBytes)("msgHash",msgHash));if(rec==null||![0,1,2,3].includes(rec))throw new Error("recovery id invalid");const radj=rec===2||rec===3?r+CURVE.n:r;if(radj>=Fp.ORDER)throw new Error("recovery id 2 or 3 invalid");const prefix=(rec&1)===0?"02":"03";const R=Point.fromHex(prefix+numToNByteStr(radj));const ir=invN(radj);const u1=modN(-h*ir);const u2=modN(s*ir);const Q=Point.BASE.multiplyAndAddUnsafe(R,u1,u2);if(!Q)throw new Error("point at infinify");Q.assertValidity();return Q}hasHighS(){return isBiggerThanHalfOrder(this.s)}normalizeS(){return this.hasHighS()?new Signature(this.r,modN(-this.s),this.recovery):this}toDERRawBytes(){return ut.hexToBytes(this.toDERHex())}toDERHex(){return exports.DER.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return ut.hexToBytes(this.toCompactHex())}toCompactHex(){return numToNByteStr(this.r)+numToNByteStr(this.s)}}const utils={isValidPrivateKey(privateKey){try{normPrivateKeyToScalar(privateKey);return true}catch(error){return false}},normPrivateKeyToScalar:normPrivateKeyToScalar,randomPrivateKey:()=>{const length=mod.getMinHashLength(CURVE.n);return mod.mapHashToField(CURVE.randomBytes(length),CURVE.n)},precompute(windowSize=8,point=Point.BASE){point._setWindowSize(windowSize);point.multiply(BigInt(3));return point}};function getPublicKey(privateKey,isCompressed=true){return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed)}function isProbPub(item){const arr=ut.isBytes(item);const str=typeof item==="string";const len=(arr||str)&&item.length;if(arr)return len===compressedLen||len===uncompressedLen;if(str)return len===2*compressedLen||len===2*uncompressedLen;if(item instanceof Point)return true;return false}function getSharedSecret(privateA,publicB,isCompressed=true){if(isProbPub(privateA))throw new Error("first arg must be private key");if(!isProbPub(publicB))throw new Error("second arg must be public key");const b=Point.fromHex(publicB);return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed)}const bits2int=CURVE.bits2int||function(bytes){const num=ut.bytesToNumberBE(bytes);const delta=bytes.length*8-CURVE.nBitLength;return delta>0?num>>BigInt(delta):num};const bits2int_modN=CURVE.bits2int_modN||function(bytes){return modN(bits2int(bytes))};const ORDER_MASK=ut.bitMask(CURVE.nBitLength);function int2octets(num){if(typeof num!=="bigint")throw new Error("bigint expected");if(!(_0n<=num&&num<ORDER_MASK))throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);return ut.numberToBytesBE(num,CURVE.nByteLength)}function prepSig(msgHash,privateKey,opts=defaultSigOpts){if(["recovered","canonical"].some(k=>k in opts))throw new Error("sign() legacy options not supported");const{hash,randomBytes}=CURVE;let{lowS,prehash,extraEntropy:ent}=opts;if(lowS==null)lowS=true;msgHash=(0,utils_js_1.ensureBytes)("msgHash",msgHash);if(prehash)msgHash=(0,utils_js_1.ensureBytes)("prehashed msgHash",hash(msgHash));const h1int=bits2int_modN(msgHash);const d=normPrivateKeyToScalar(privateKey);const seedArgs=[int2octets(d),int2octets(h1int)];if(ent!=null&&ent!==false){const e=ent===true?randomBytes(Fp.BYTES):ent;seedArgs.push((0,utils_js_1.ensureBytes)("extraEntropy",e))}const seed=ut.concatBytes(...seedArgs);const m=h1int;function k2sig(kBytes){const k=bits2int(kBytes);if(!isWithinCurveOrder(k))return;const ik=invN(k);const q=Point.BASE.multiply(k).toAffine();const r=modN(q.x);if(r===_0n)return;const s=modN(ik*modN(m+r*d));if(s===_0n)return;let recovery=(q.x===r?0:2)|Number(q.y&_1n);let normS=s;if(lowS&&isBiggerThanHalfOrder(s)){normS=normalizeS(s);recovery^=1}return new Signature(r,normS,recovery)}return{seed:seed,k2sig:k2sig}}const defaultSigOpts={lowS:CURVE.lowS,prehash:false};const defaultVerOpts={lowS:CURVE.lowS,prehash:false};function sign(msgHash,privKey,opts=defaultSigOpts){const{seed,k2sig}=prepSig(msgHash,privKey,opts);const C=CURVE;const drbg=ut.createHmacDrbg(C.hash.outputLen,C.nByteLength,C.hmac);return drbg(seed,k2sig)}Point.BASE._setWindowSize(8);function verify(signature,msgHash,publicKey,opts=defaultVerOpts){const sg=signature;msgHash=(0,utils_js_1.ensureBytes)("msgHash",msgHash);publicKey=(0,utils_js_1.ensureBytes)("publicKey",publicKey);if("strict"in opts)throw new Error("options.strict was renamed to lowS");const{lowS,prehash}=opts;let _sig=undefined;let P;try{if(typeof sg==="string"||ut.isBytes(sg)){try{_sig=Signature.fromDER(sg)}catch(derError){if(!(derError instanceof exports.DER.Err))throw derError;_sig=Signature.fromCompact(sg)}}else if(typeof sg==="object"&&typeof sg.r==="bigint"&&typeof sg.s==="bigint"){const{r,s}=sg;_sig=new Signature(r,s)}else{throw new Error("PARSE")}P=Point.fromHex(publicKey)}catch(error){if(error.message==="PARSE")throw new Error(`signature must be Signature instance, Uint8Array or hex string`);return false}if(lowS&&_sig.hasHighS())return false;if(prehash)msgHash=CURVE.hash(msgHash);const{r,s}=_sig;const h=bits2int_modN(msgHash);const is=invN(s);const u1=modN(h*is);const u2=modN(r*is);const R=Point.BASE.multiplyAndAddUnsafe(P,u1,u2)?.toAffine();if(!R)return false;const v=modN(R.x);return v===r}return{CURVE:CURVE,getPublicKey:getPublicKey,getSharedSecret:getSharedSecret,sign:sign,verify:verify,ProjectivePoint:Point,Signature:Signature,utils:utils}}exports.weierstrass=weierstrass;function SWUFpSqrtRatio(Fp,Z){const q=Fp.ORDER;let l=_0n;for(let o=q-_1n;o%_2n===_0n;o/=_2n)l+=_1n;const c1=l;const _2n_pow_c1_1=_2n<<c1-_1n-_1n;const _2n_pow_c1=_2n_pow_c1_1*_2n;const c2=(q-_1n)/_2n_pow_c1;const c3=(c2-_1n)/_2n;const c4=_2n_pow_c1-_1n;const c5=_2n_pow_c1_1;const c6=Fp.pow(Z,c2);const c7=Fp.pow(Z,(c2+_1n)/_2n);let sqrtRatio=(u,v)=>{let tv1=c6;let tv2=Fp.pow(v,c4);let tv3=Fp.sqr(tv2);tv3=Fp.mul(tv3,v);let tv5=Fp.mul(u,tv3);tv5=Fp.pow(tv5,c3);tv5=Fp.mul(tv5,tv2);tv2=Fp.mul(tv5,v);tv3=Fp.mul(tv5,u);let tv4=Fp.mul(tv3,tv2);tv5=Fp.pow(tv4,c5);let isQR=Fp.eql(tv5,Fp.ONE);tv2=Fp.mul(tv3,c7);tv5=Fp.mul(tv4,tv1);tv3=Fp.cmov(tv2,tv3,isQR);tv4=Fp.cmov(tv5,tv4,isQR);for(let i=c1;i>_1n;i--){let tv5=i-_2n;tv5=_2n<<tv5-_1n;let tvv5=Fp.pow(tv4,tv5);const e1=Fp.eql(tvv5,Fp.ONE);tv2=Fp.mul(tv3,tv1);tv1=Fp.mul(tv1,tv1);tvv5=Fp.mul(tv4,tv1);tv3=Fp.cmov(tv2,tv3,e1);tv4=Fp.cmov(tvv5,tv4,e1)}return{isValid:isQR,value:tv3}};if(Fp.ORDER%_4n===_3n){const c1=(Fp.ORDER-_3n)/_4n;const c2=Fp.sqrt(Fp.neg(Z));sqrtRatio=(u,v)=>{let tv1=Fp.sqr(v);const tv2=Fp.mul(u,v);tv1=Fp.mul(tv1,tv2);let y1=Fp.pow(tv1,c1);y1=Fp.mul(y1,tv2);const y2=Fp.mul(y1,c2);const tv3=Fp.mul(Fp.sqr(y1),v);const isQR=Fp.eql(tv3,u);let y=Fp.cmov(y2,y1,isQR);return{isValid:isQR,value:y}}}return sqrtRatio}exports.SWUFpSqrtRatio=SWUFpSqrtRatio;function mapToCurveSimpleSWU(Fp,opts){mod.validateField(Fp);if(!Fp.isValid(opts.A)||!Fp.isValid(opts.B)||!Fp.isValid(opts.Z))throw new Error("mapToCurveSimpleSWU: invalid opts");const sqrtRatio=SWUFpSqrtRatio(Fp,opts.Z);if(!Fp.isOdd)throw new Error("Fp.isOdd is not implemented!");return u=>{let tv1,tv2,tv3,tv4,tv5,tv6,x,y;tv1=Fp.sqr(u);tv1=Fp.mul(tv1,opts.Z);tv2=Fp.sqr(tv1);tv2=Fp.add(tv2,tv1);tv3=Fp.add(tv2,Fp.ONE);tv3=Fp.mul(tv3,opts.B);tv4=Fp.cmov(opts.Z,Fp.neg(tv2),!Fp.eql(tv2,Fp.ZERO));tv4=Fp.mul(tv4,opts.A);tv2=Fp.sqr(tv3);tv6=Fp.sqr(tv4);tv5=Fp.mul(tv6,opts.A);tv2=Fp.add(tv2,tv5);tv2=Fp.mul(tv2,tv3);tv6=Fp.mul(tv6,tv4);tv5=Fp.mul(tv6,opts.B);tv2=Fp.add(tv2,tv5);x=Fp.mul(tv1,tv3);const{isValid,value}=sqrtRatio(tv2,tv6);y=Fp.mul(tv1,u);y=Fp.mul(y,value);x=Fp.cmov(x,tv3,isValid);y=Fp.cmov(y,value,isValid);const e1=Fp.isOdd(u)===Fp.isOdd(y);y=Fp.cmov(Fp.neg(y),y,e1);x=Fp.div(x,tv4);return{x:x,y:y}}}exports.mapToCurveSimpleSWU=mapToCurveSimpleSWU},{"./curve.js":4,"./modular.js":5,"./utils.js":7}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.output=exports.exists=exports.hash=exports.bytes=exports.bool=exports.number=exports.isBytes=void 0;function number(n){if(!Number.isSafeInteger(n)||n<0)throw new Error(`positive integer expected, not ${n}`)}exports.number=number;function bool(b){if(typeof b!=="boolean")throw new Error(`boolean expected, not ${b}`)}exports.bool=bool;function isBytes(a){return a instanceof Uint8Array||a!=null&&typeof a==="object"&&a.constructor.name==="Uint8Array"}exports.isBytes=isBytes;function bytes(b,...lengths){if(!isBytes(b))throw new Error("Uint8Array expected");if(lengths.length>0&&!lengths.includes(b.length))throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`)}exports.bytes=bytes;function hash(h){if(typeof h!=="function"||typeof h.create!=="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");number(h.outputLen);number(h.blockLen)}exports.hash=hash;function exists(instance,checkFinished=true){if(instance.destroyed)throw new Error("Hash instance has been destroyed");if(checkFinished&&instance.finished)throw new Error("Hash#digest() has already been called")}exports.exists=exists;function output(out,instance){bytes(out);const min=instance.outputLen;if(out.length<min){throw new Error(`digestInto() expects output buffer of length at least ${min}`)}}exports.output=output;const assert={number:number,bool:bool,bytes:bytes,hash:hash,exists:exists,output:output};exports.default=assert},{}],10:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.HashMD=exports.Maj=exports.Chi=void 0;const _assert_js_1=require("./_assert.js");const utils_js_1=require("./utils.js");function setBigUint64(view,byteOffset,value,isLE){if(typeof view.setBigUint64==="function")return view.setBigUint64(byteOffset,value,isLE);const _32n=BigInt(32);const _u32_max=BigInt(4294967295);const wh=Number(value>>_32n&_u32_max);const wl=Number(value&_u32_max);const h=isLE?4:0;const l=isLE?0:4;view.setUint32(byteOffset+h,wh,isLE);view.setUint32(byteOffset+l,wl,isLE)}const Chi=(a,b,c)=>a&b^~a&c;exports.Chi=Chi;const Maj=(a,b,c)=>a&b^a&c^b&c;exports.Maj=Maj;class HashMD extends utils_js_1.Hash{constructor(blockLen,outputLen,padOffset,isLE){super();this.blockLen=blockLen;this.outputLen=outputLen;this.padOffset=padOffset;this.isLE=isLE;this.finished=false;this.length=0;this.pos=0;this.destroyed=false;this.buffer=new Uint8Array(blockLen);this.view=(0,utils_js_1.createView)(this.buffer)}update(data){(0,_assert_js_1.exists)(this);const{view,buffer,blockLen}=this;data=(0,utils_js_1.toBytes)(data);const len=data.length;for(let pos=0;pos<len;){const take=Math.min(blockLen-this.pos,len-pos);if(take===blockLen){const dataView=(0,utils_js_1.createView)(data);for(;blockLen<=len-pos;pos+=blockLen)this.process(dataView,pos);continue}buffer.set(data.subarray(pos,pos+take),this.pos);this.pos+=take;pos+=take;if(this.pos===blockLen){this.process(view,0);this.pos=0}}this.length+=data.length;this.roundClean();return this}digestInto(out){(0,_assert_js_1.exists)(this);(0,_assert_js_1.output)(out,this);this.finished=true;const{buffer,view,blockLen,isLE}=this;let{pos}=this;buffer[pos++]=128;this.buffer.subarray(pos).fill(0);if(this.padOffset>blockLen-pos){this.process(view,0);pos=0}for(let i=pos;i<blockLen;i++)buffer[i]=0;setBigUint64(view,blockLen-8,BigInt(this.length*8),isLE);this.process(view,0);const oview=(0,utils_js_1.createView)(out);const len=this.outputLen;if(len%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const outLen=len/4;const state=this.get();if(outLen>state.length)throw new Error("_sha2: outputLen bigger than state");for(let i=0;i<outLen;i++)oview.setUint32(4*i,state[i],isLE)}digest(){const{buffer,outputLen}=this;this.digestInto(buffer);const res=buffer.slice(0,outputLen);this.destroy();return res}_cloneInto(to){to||(to=new this.constructor);to.set(...this.get());const{blockLen,buffer,length,finished,destroyed,pos}=this;to.length=length;to.pos=pos;to.finished=finished;to.destroyed=destroyed;if(length%blockLen)to.buffer.set(buffer);return to}}exports.HashMD=HashMD},{"./_assert.js":9,"./utils.js":16}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.add5L=exports.add5H=exports.add4H=exports.add4L=exports.add3H=exports.add3L=exports.add=exports.rotlBL=exports.rotlBH=exports.rotlSL=exports.rotlSH=exports.rotr32L=exports.rotr32H=exports.rotrBL=exports.rotrBH=exports.rotrSL=exports.rotrSH=exports.shrSL=exports.shrSH=exports.toBig=exports.split=exports.fromBig=void 0;const U32_MASK64=BigInt(2**32-1);const _32n=BigInt(32);function fromBig(n,le=false){if(le)return{h:Number(n&U32_MASK64),l:Number(n>>_32n&U32_MASK64)};return{h:Number(n>>_32n&U32_MASK64)|0,l:Number(n&U32_MASK64)|0}}exports.fromBig=fromBig;function split(lst,le=false){let Ah=new Uint32Array(lst.length);let Al=new Uint32Array(lst.length);for(let i=0;i<lst.length;i++){const{h,l}=fromBig(lst[i],le);[Ah[i],Al[i]]=[h,l]}return[Ah,Al]}exports.split=split;const toBig=(h,l)=>BigInt(h>>>0)<<_32n|BigInt(l>>>0);exports.toBig=toBig;const shrSH=(h,_l,s)=>h>>>s;exports.shrSH=shrSH;const shrSL=(h,l,s)=>h<<32-s|l>>>s;exports.shrSL=shrSL;const rotrSH=(h,l,s)=>h>>>s|l<<32-s;exports.rotrSH=rotrSH;const rotrSL=(h,l,s)=>h<<32-s|l>>>s;exports.rotrSL=rotrSL;const rotrBH=(h,l,s)=>h<<64-s|l>>>s-32;exports.rotrBH=rotrBH;const rotrBL=(h,l,s)=>h>>>s-32|l<<64-s;exports.rotrBL=rotrBL;const rotr32H=(_h,l)=>l;exports.rotr32H=rotr32H;const rotr32L=(h,_l)=>h;exports.rotr32L=rotr32L;const rotlSH=(h,l,s)=>h<<s|l>>>32-s;exports.rotlSH=rotlSH;const rotlSL=(h,l,s)=>l<<s|h>>>32-s;exports.rotlSL=rotlSL;const rotlBH=(h,l,s)=>l<<s-32|h>>>64-s;exports.rotlBH=rotlBH;const rotlBL=(h,l,s)=>h<<s-32|l>>>64-s;exports.rotlBL=rotlBL;function add(Ah,Al,Bh,Bl){const l=(Al>>>0)+(Bl>>>0);return{h:Ah+Bh+(l/2**32|0)|0,l:l|0}}exports.add=add;const add3L=(Al,Bl,Cl)=>(Al>>>0)+(Bl>>>0)+(Cl>>>0);exports.add3L=add3L;const add3H=(low,Ah,Bh,Ch)=>Ah+Bh+Ch+(low/2**32|0)|0;exports.add3H=add3H;const add4L=(Al,Bl,Cl,Dl)=>(Al>>>0)+(Bl>>>0)+(Cl>>>0)+(Dl>>>0);exports.add4L=add4L;const add4H=(low,Ah,Bh,Ch,Dh)=>Ah+Bh+Ch+Dh+(low/2**32|0)|0;exports.add4H=add4H;const add5L=(Al,Bl,Cl,Dl,El)=>(Al>>>0)+(Bl>>>0)+(Cl>>>0)+(Dl>>>0)+(El>>>0);exports.add5L=add5L;const add5H=(low,Ah,Bh,Ch,Dh,Eh)=>Ah+Bh+Ch+Dh+Eh+(low/2**32|0)|0;exports.add5H=add5H;const u64={fromBig:fromBig,split:split,toBig:toBig,shrSH:shrSH,shrSL:shrSL,rotrSH:rotrSH,rotrSL:rotrSL,rotrBH:rotrBH,rotrBL:rotrBL,rotr32H:rotr32H,rotr32L:rotr32L,rotlSH:rotlSH,rotlSL:rotlSL,rotlBH:rotlBH,rotlBL:rotlBL,add:add,add3L:add3L,add3H:add3H,add4L:add4L,add4H:add4H,add5H:add5H,add5L:add5L};exports.default=u64},{}],12:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.crypto=void 0;exports.crypto=typeof globalThis==="object"&&"crypto"in globalThis?globalThis.crypto:undefined},{}],13:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.hmac=exports.HMAC=void 0;const _assert_js_1=require("./_assert.js");const utils_js_1=require("./utils.js");class HMAC extends utils_js_1.Hash{constructor(hash,_key){super();this.finished=false;this.destroyed=false;(0,_assert_js_1.hash)(hash);const key=(0,utils_js_1.toBytes)(_key);this.iHash=hash.create();if(typeof this.iHash.update!=="function")throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const blockLen=this.blockLen;const pad=new Uint8Array(blockLen);pad.set(key.length>blockLen?hash.create().update(key).digest():key);for(let i=0;i<pad.length;i++)pad[i]^=54;this.iHash.update(pad);this.oHash=hash.create();for(let i=0;i<pad.length;i++)pad[i]^=54^92;this.oHash.update(pad);pad.fill(0)}update(buf){(0,_assert_js_1.exists)(this);this.iHash.update(buf);return this}digestInto(out){(0,_assert_js_1.exists)(this);(0,_assert_js_1.bytes)(out,this.outputLen);this.finished=true;this.iHash.digestInto(out);this.oHash.update(out);this.oHash.digestInto(out);this.destroy()}digest(){const out=new Uint8Array(this.oHash.outputLen);this.digestInto(out);return out}_cloneInto(to){to||(to=Object.create(Object.getPrototypeOf(this),{}));const{oHash,iHash,finished,destroyed,blockLen,outputLen}=this;to=to;to.finished=finished;to.destroyed=destroyed;to.blockLen=blockLen;to.outputLen=outputLen;to.oHash=oHash._cloneInto(to.oHash);to.iHash=iHash._cloneInto(to.iHash);return to}destroy(){this.destroyed=true;this.oHash.destroy();this.iHash.destroy()}}exports.HMAC=HMAC;const hmac=(hash,key,message)=>new HMAC(hash,key).update(message).digest();exports.hmac=hmac;exports.hmac.create=(hash,key)=>new HMAC(hash,key)},{"./_assert.js":9,"./utils.js":16}],14:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.sha224=exports.sha256=void 0;const _md_js_1=require("./_md.js");const utils_js_1=require("./utils.js");const SHA256_K=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);const SHA256_IV=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]);const SHA256_W=new Uint32Array(64);class SHA256 extends _md_js_1.HashMD{constructor(){super(64,32,8,false);this.A=SHA256_IV[0]|0;this.B=SHA256_IV[1]|0;this.C=SHA256_IV[2]|0;this.D=SHA256_IV[3]|0;this.E=SHA256_IV[4]|0;this.F=SHA256_IV[5]|0;this.G=SHA256_IV[6]|0;this.H=SHA256_IV[7]|0}get(){const{A,B,C,D,E,F,G,H}=this;return[A,B,C,D,E,F,G,H]}set(A,B,C,D,E,F,G,H){this.A=A|0;this.B=B|0;this.C=C|0;this.D=D|0;this.E=E|0;this.F=F|0;this.G=G|0;this.H=H|0}process(view,offset){for(let i=0;i<16;i++,offset+=4)SHA256_W[i]=view.getUint32(offset,false);for(let i=16;i<64;i++){const W15=SHA256_W[i-15];const W2=SHA256_W[i-2];const s0=(0,utils_js_1.rotr)(W15,7)^(0,utils_js_1.rotr)(W15,18)^W15>>>3;const s1=(0,utils_js_1.rotr)(W2,17)^(0,utils_js_1.rotr)(W2,19)^W2>>>10;SHA256_W[i]=s1+SHA256_W[i-7]+s0+SHA256_W[i-16]|0}let{A,B,C,D,E,F,G,H}=this;for(let i=0;i<64;i++){const sigma1=(0,utils_js_1.rotr)(E,6)^(0,utils_js_1.rotr)(E,11)^(0,utils_js_1.rotr)(E,25);const T1=H+sigma1+(0,_md_js_1.Chi)(E,F,G)+SHA256_K[i]+SHA256_W[i]|0;const sigma0=(0,utils_js_1.rotr)(A,2)^(0,utils_js_1.rotr)(A,13)^(0,utils_js_1.rotr)(A,22);const T2=sigma0+(0,_md_js_1.Maj)(A,B,C)|0;H=G;G=F;F=E;E=D+T1|0;D=C;C=B;B=A;A=T1+T2|0}A=A+this.A|0;B=B+this.B|0;C=C+this.C|0;D=D+this.D|0;E=E+this.E|0;F=F+this.F|0;G=G+this.G|0;H=H+this.H|0;this.set(A,B,C,D,E,F,G,H)}roundClean(){SHA256_W.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0);this.buffer.fill(0)}}class SHA224 extends SHA256{constructor(){super();this.A=3238371032|0;this.B=914150663|0;this.C=812702999|0;this.D=4144912697|0;this.E=4290775857|0;this.F=1750603025|0;this.G=1694076839|0;this.H=3204075428|0;this.outputLen=28}}exports.sha256=(0,utils_js_1.wrapConstructor)(()=>new SHA256);exports.sha224=(0,utils_js_1.wrapConstructor)(()=>new SHA224)},{"./_md.js":10,"./utils.js":16}],15:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.shake256=exports.shake128=exports.keccak_512=exports.keccak_384=exports.keccak_256=exports.keccak_224=exports.sha3_512=exports.sha3_384=exports.sha3_256=exports.sha3_224=exports.Keccak=exports.keccakP=void 0;const _assert_js_1=require("./_assert.js");const _u64_js_1=require("./_u64.js");const utils_js_1=require("./utils.js");const SHA3_PI=[];const SHA3_ROTL=[];const _SHA3_IOTA=[];const _0n=BigInt(0);const _1n=BigInt(1);const _2n=BigInt(2);const _7n=BigInt(7);const _256n=BigInt(256);const _0x71n=BigInt(113);for(let round=0,R=_1n,x=1,y=0;round<24;round++){[x,y]=[y,(2*x+3*y)%5];SHA3_PI.push(2*(5*y+x));SHA3_ROTL.push((round+1)*(round+2)/2%64);let t=_0n;for(let j=0;j<7;j++){R=(R<<_1n^(R>>_7n)*_0x71n)%_256n;if(R&_2n)t^=_1n<<(_1n<<BigInt(j))-_1n}_SHA3_IOTA.push(t)}const[SHA3_IOTA_H,SHA3_IOTA_L]=(0,_u64_js_1.split)(_SHA3_IOTA,true);const rotlH=(h,l,s)=>s>32?(0,_u64_js_1.rotlBH)(h,l,s):(0,_u64_js_1.rotlSH)(h,l,s);const rotlL=(h,l,s)=>s>32?(0,_u64_js_1.rotlBL)(h,l,s):(0,_u64_js_1.rotlSL)(h,l,s);function keccakP(s,rounds=24){const B=new Uint32Array(5*2);for(let round=24-rounds;round<24;round++){for(let x=0;x<10;x++)B[x]=s[x]^s[x+10]^s[x+20]^s[x+30]^s[x+40];for(let x=0;x<10;x+=2){const idx1=(x+8)%10;const idx0=(x+2)%10;const B0=B[idx0];const B1=B[idx0+1];const Th=rotlH(B0,B1,1)^B[idx1];const Tl=rotlL(B0,B1,1)^B[idx1+1];for(let y=0;y<50;y+=10){s[x+y]^=Th;s[x+y+1]^=Tl}}let curH=s[2];let curL=s[3];for(let t=0;t<24;t++){const shift=SHA3_ROTL[t];const Th=rotlH(curH,curL,shift);const Tl=rotlL(curH,curL,shift);const PI=SHA3_PI[t];curH=s[PI];curL=s[PI+1];s[PI]=Th;s[PI+1]=Tl}for(let y=0;y<50;y+=10){for(let x=0;x<10;x++)B[x]=s[y+x];for(let x=0;x<10;x++)s[y+x]^=~B[(x+2)%10]&B[(x+4)%10]}s[0]^=SHA3_IOTA_H[round];s[1]^=SHA3_IOTA_L[round]}B.fill(0)}exports.keccakP=keccakP;class Keccak extends utils_js_1.Hash{constructor(blockLen,suffix,outputLen,enableXOF=false,rounds=24){super();this.blockLen=blockLen;this.suffix=suffix;this.outputLen=outputLen;this.enableXOF=enableXOF;this.rounds=rounds;this.pos=0;this.posOut=0;this.finished=false;this.destroyed=false;(0,_assert_js_1.number)(outputLen);if(0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200);this.state32=(0,utils_js_1.u32)(this.state)}keccak(){if(!utils_js_1.isLE)(0,utils_js_1.byteSwap32)(this.state32);keccakP(this.state32,this.rounds);if(!utils_js_1.isLE)(0,utils_js_1.byteSwap32)(this.state32);this.posOut=0;this.pos=0}update(data){(0,_assert_js_1.exists)(this);const{blockLen,state}=this;data=(0,utils_js_1.toBytes)(data);const len=data.length;for(let pos=0;pos<len;){const take=Math.min(blockLen-this.pos,len-pos);for(let i=0;i<take;i++)state[this.pos++]^=data[pos++];if(this.pos===blockLen)this.keccak()}return this}finish(){if(this.finished)return;this.finished=true;const{state,suffix,pos,blockLen}=this;state[pos]^=suffix;if((suffix&128)!==0&&pos===blockLen-1)this.keccak();state[blockLen-1]^=128;this.keccak()}writeInto(out){(0,_assert_js_1.exists)(this,false);(0,_assert_js_1.bytes)(out);this.finish();const bufferOut=this.state;const{blockLen}=this;for(let pos=0,len=out.length;pos<len;){if(this.posOut>=blockLen)this.keccak();const take=Math.min(blockLen-this.posOut,len-pos);out.set(bufferOut.subarray(this.posOut,this.posOut+take),pos);this.posOut+=take;pos+=take}return out}xofInto(out){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(out)}xof(bytes){(0,_assert_js_1.number)(bytes);return this.xofInto(new Uint8Array(bytes))}digestInto(out){(0,_assert_js_1.output)(out,this);if(this.finished)throw new Error("digest() was already called");this.writeInto(out);this.destroy();return out}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=true;this.state.fill(0)}_cloneInto(to){const{blockLen,suffix,outputLen,rounds,enableXOF}=this;to||(to=new Keccak(blockLen,suffix,outputLen,enableXOF,rounds));to.state32.set(this.state32);to.pos=this.pos;to.posOut=this.posOut;to.finished=this.finished;to.rounds=rounds;to.suffix=suffix;to.outputLen=outputLen;to.enableXOF=enableXOF;to.destroyed=this.destroyed;return to}}exports.Keccak=Keccak;const gen=(suffix,blockLen,outputLen)=>(0,utils_js_1.wrapConstructor)(()=>new Keccak(blockLen,suffix,outputLen));exports.sha3_224=gen(6,144,224/8);exports.sha3_256=gen(6,136,256/8);exports.sha3_384=gen(6,104,384/8);exports.sha3_512=gen(6,72,512/8);exports.keccak_224=gen(1,144,224/8);exports.keccak_256=gen(1,136,256/8);exports.keccak_384=gen(1,104,384/8);exports.keccak_512=gen(1,72,512/8);const genShake=(suffix,blockLen,outputLen)=>(0,utils_js_1.wrapXOFConstructorWithOpts)((opts={})=>new Keccak(blockLen,suffix,opts.dkLen===undefined?outputLen:opts.dkLen,true));exports.shake128=genShake(31,168,128/8);exports.shake256=genShake(31,136,256/8)},{"./_assert.js":9,"./_u64.js":11,"./utils.js":16}],16:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.randomBytes=exports.wrapXOFConstructorWithOpts=exports.wrapConstructorWithOpts=exports.wrapConstructor=exports.checkOpts=exports.Hash=exports.concatBytes=exports.toBytes=exports.utf8ToBytes=exports.asyncLoop=exports.nextTick=exports.hexToBytes=exports.bytesToHex=exports.byteSwap32=exports.byteSwapIfBE=exports.byteSwap=exports.isLE=exports.rotl=exports.rotr=exports.createView=exports.u32=exports.u8=exports.isBytes=void 0;const crypto_1=require("@noble/hashes/crypto");const _assert_js_1=require("./_assert.js");function isBytes(a){return a instanceof Uint8Array||a!=null&&typeof a==="object"&&a.constructor.name==="Uint8Array"}exports.isBytes=isBytes;const u8=arr=>new Uint8Array(arr.buffer,arr.byteOffset,arr.byteLength);exports.u8=u8;const u32=arr=>new Uint32Array(arr.buffer,arr.byteOffset,Math.floor(arr.byteLength/4));exports.u32=u32;const createView=arr=>new DataView(arr.buffer,arr.byteOffset,arr.byteLength);exports.createView=createView;const rotr=(word,shift)=>word<<32-shift|word>>>shift;exports.rotr=rotr;const rotl=(word,shift)=>word<<shift|word>>>32-shift>>>0;exports.rotl=rotl;exports.isLE=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68;const byteSwap=word=>word<<24&4278190080|word<<8&16711680|word>>>8&65280|word>>>24&255;exports.byteSwap=byteSwap;exports.byteSwapIfBE=exports.isLE?n=>n:n=>(0,exports.byteSwap)(n);function byteSwap32(arr){for(let i=0;i<arr.length;i++){arr[i]=(0,exports.byteSwap)(arr[i])}}exports.byteSwap32=byteSwap32;const hexes=Array.from({length:256},(_,i)=>i.toString(16).padStart(2,"0"));function bytesToHex(bytes){(0,_assert_js_1.bytes)(bytes);let hex="";for(let i=0;i<bytes.length;i++){hex+=hexes[bytes[i]]}return hex}exports.bytesToHex=bytesToHex;const asciis={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function asciiToBase16(char){if(char>=asciis._0&&char<=asciis._9)return char-asciis._0;if(char>=asciis._A&&char<=asciis._F)return char-(asciis._A-10);if(char>=asciis._a&&char<=asciis._f)return char-(asciis._a-10);return}function hexToBytes(hex){if(typeof hex!=="string")throw new Error("hex string expected, got "+typeof hex);const hl=hex.length;const al=hl/2;if(hl%2)throw new Error("padded hex string expected, got unpadded hex of length "+hl);const array=new Uint8Array(al);for(let ai=0,hi=0;ai<al;ai++,hi+=2){const n1=asciiToBase16(hex.charCodeAt(hi));const n2=asciiToBase16(hex.charCodeAt(hi+1));if(n1===undefined||n2===undefined){const char=hex[hi]+hex[hi+1];throw new Error('hex string expected, got non-hex character "'+char+'" at index '+hi)}array[ai]=n1*16+n2}return array}exports.hexToBytes=hexToBytes;const nextTick=async()=>{};exports.nextTick=nextTick;async function asyncLoop(iters,tick,cb){let ts=Date.now();for(let i=0;i<iters;i++){cb(i);const diff=Date.now()-ts;if(diff>=0&&diff<tick)continue;await(0,exports.nextTick)();ts+=diff}}exports.asyncLoop=asyncLoop;function utf8ToBytes(str){if(typeof str!=="string")throw new Error(`utf8ToBytes expected string, got ${typeof str}`);return new Uint8Array((new TextEncoder).encode(str))}exports.utf8ToBytes=utf8ToBytes;function toBytes(data){if(typeof data==="string")data=utf8ToBytes(data);(0,_assert_js_1.bytes)(data);return data}exports.toBytes=toBytes;function concatBytes(...arrays){let sum=0;for(let i=0;i<arrays.length;i++){const a=arrays[i];(0,_assert_js_1.bytes)(a);sum+=a.length}const res=new Uint8Array(sum);for(let i=0,pad=0;i<arrays.length;i++){const a=arrays[i];res.set(a,pad);pad+=a.length}return res}exports.concatBytes=concatBytes;class Hash{clone(){return this._cloneInto()}}exports.Hash=Hash;const toStr={}.toString;function checkOpts(defaults,opts){if(opts!==undefined&&toStr.call(opts)!=="[object Object]")throw new Error("Options should be object or undefined");const merged=Object.assign(defaults,opts);return merged}exports.checkOpts=checkOpts;function wrapConstructor(hashCons){const hashC=msg=>hashCons().update(toBytes(msg)).digest();const tmp=hashCons();hashC.outputLen=tmp.outputLen;hashC.blockLen=tmp.blockLen;hashC.create=()=>hashCons();return hashC}exports.wrapConstructor=wrapConstructor;function wrapConstructorWithOpts(hashCons){const hashC=(msg,opts)=>hashCons(opts).update(toBytes(msg)).digest();const tmp=hashCons({});hashC.outputLen=tmp.outputLen;hashC.blockLen=tmp.blockLen;hashC.create=opts=>hashCons(opts);return hashC}exports.wrapConstructorWithOpts=wrapConstructorWithOpts;function wrapXOFConstructorWithOpts(hashCons){const hashC=(msg,opts)=>hashCons(opts).update(toBytes(msg)).digest();const tmp=hashCons({});hashC.outputLen=tmp.outputLen;hashC.blockLen=tmp.blockLen;hashC.create=opts=>hashCons(opts);return hashC}exports.wrapXOFConstructorWithOpts=wrapXOFConstructorWithOpts;function randomBytes(bytesLength=32){if(crypto_1.crypto&&typeof crypto_1.crypto.getRandomValues==="function"){return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength))}throw new Error("crypto.getRandomValues must be defined")}exports.randomBytes=randomBytes},{"./_assert.js":9,"@noble/hashes/crypto":12}]},{},[1]);